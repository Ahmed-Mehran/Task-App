

###  CONFIGURE OUR ENVIRONMENT VARIABLES


## FIRST GO TO SETTINGS.PY(AT THE TOP) AND USE THE PACKAGES YOU INSTALLED IN LAST LECTURE AND SET THEM UP ACCORDINGLY IN SETTINGS.PY



################# .SETTINGS.PY

## HERE FIRST IMPORT THE PACKAGE environ AND SETUP THE ENVIRONMENT

import environ

env = environ.Env()

environ.Env.read_env()

###   DETAILS OF ABOVE LINE

# Imagine you're building a Python application, and you need to store some important information like passwords, API keys, or settings. 
# You don't want to hardcode these into your code because it's not safe (anyone who sees your code can access them). So, you decide to
# store them as environment variables. Environment variables are like little pieces of information that your computer stores and your code can access.

# Here's what each line does:

# import environ: This line brings in a special tool called "environ" that helps us work with environment variables in Python.

# env = environ.Env(): This line sets up a space in our program where we can store and manage our environment variables. We call this space env. It's 
# like creating a special box where we can keep all our important notes (the environment variables) safe and organized. Later, we can use this env
# box to access those notes whenever our program needs them.

# environ.Env.read_env(): This line tells our code to look for a file named .env in the same folder as our code. In this .env file,
#  we can put all our secret information, like passwords and API keys. This helps keep our secrets safe because they're not directly in our code.

# So, in short, this code helps us manage and access important information (like passwords and API keys) in our Python application in a safer way.

# Think of environment variables as little notes your computer keeps for your programs. These notes contain important information that your programs
# might need, like passwords, file paths, or settings.

### SEE WE HAVE A LOT OF SENSITIVE INFORMATION IN THIS SETTINGS.PY FILE, E.G SECRET_KEY, HOST IN SMTP CONFIG, AWS ACCESS KEYS, WE WILL NOW MAKE A .env file
### After creating the env instance(env = environ.Env()), you typically create a file named .env (note the dot at the beginning of the filename) in the same 
### directory as your Python code(i.e in the same directory as of this settings.py file), In this .env file, you'll store sensitive information like
### AWS access keys,  bucket names, and secret keys and all sensitive info. Each piece of information is typically stored as a key-value pair



############## .ENV FILE


###  HERE ARE WE GOING TO SET UP OUR ENVIRONMENT VARIABLES.  In this .env file, you'll store sensitive information like AWS access keys, bucket names, and secret key


SECRET_KEY = django-insecure-liv^_qz*apm$(g3-e=qn8f8716!uos-$2-fuq(ev2^d1cz7=%m    ## HERE WE HAVE COPIED THE SECRET KEY VALUE FROM SETTINGS.PY TO SECURE IT, 
                                                                                   ## THE VARIABLE SECRET_KEY CAN BE ANY NAME YOU WANT IT TO GIVE
                                                                                   ## BUT NOW AS YOU HAVE PASTED IT HERE YOU TO REMOVE THIS VALUE THERE I.E IN
                                                                                   ## SETTINGS.PY AND REPLACE IT WITH env(name of this file) and this vareiable i.e
                                                                                   ## SECRET KEY 
                                                                                   # SO IN SETTINGS.PY IT WILL LOOK SOMETHING LIKE THIS, SECRET_KEY = env('SECRET_KEY')


## THEN AS WE HAVE THE POSSGRESSS DATABASE INITIALIZED IN SETTINGS.PY, WE WOULD TO SECURE SOME PARAMETERS OF THAT SUCH AS NAME, USER, PASSWORD, HOST ETC

DB_NAME = demo_1a  ## AND IN SETTINGS.PY, we rename the respective variables name to this ,  'NAME': env('DB_NAME')

DB_USER = mehran_db  ## AND IN SETTINGS.PY, we rename the respective variables name to this, 'USER': env('DB_USER')

DB_PASSWORD = Patanahi786   ## AND IN SETTINGS.PY, we rename the respective variables name to this, 'PASSWORD': env('DB_PASSWORD')

DB_HOST = database-1.c582waoo0cgd.us-east-2.rds.amazonaws.com  ## AND IN SETTINGS.PY, we rename the respective variables name to this,  'HOST': env('DB_HOST'),    



### NOW WE WILL DO THE SAME TO SECURE THE SMTP CONFIG OF OUR EMAIL

EMAIL_HOST_USER = ahmeddarmehran1@gmail.com  ##  in settings.py, EMAIL_HOST_USER = env('EMAIL_HOST_USER')

EMAIL_HOST_PASSWORD = xtrcxdentxopgbsj  ##  in settings.py,  EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = ahmeddarmehran1@gmail.com   ##  in settings.py,  DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')




### S3 BUCKET 

AWS_STORAGE_BUCKET_NAME = mehran-bkt-22

AWS_ACCESS_KEY_ID = AKIAQ3EGUOYOIYUCOH5A 
AWS_SECRET_ACCESS_KEY = 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



###  NOW WE WILL CREATE A .gitignore FILE IN THE SAME DIRECTORY TO KEEP THIS FILE SAFE FROM ANYONE TRYING TO ACCES OR READ IT


################ .gitignore 

# The .gitignore file is a special file used by Git to determine which files and directories should be ignored and not tracked by the version control system.
# When you're working on a project, there may be files or directories that you don't want to include in your Git repository. These could be things like temporary
# files, log files, configuration files with sensitive information (like .env files), or compiled code.

# Here's what .gitignore does:

# Ignores Files and Directories: When you add filenames or patterns to .gitignore, Git will ignore those files and directories when you run commands 
# like git add or git commit. This means they won't be tracked or included in your repository's history.

# Keeps Sensitive Information Safe: .gitignore is particularly useful for keeping sensitive information, like passwords or API keys stored in .env files, out
# of your Git repository. This helps protect your sensitive data from being exposed if your repository is ever made public or shared with others.

# Improves Project Cleanliness: By ignoring unnecessary files and directories, .gitignore helps keep your project directory clean and focused only on the
# files that are essential to your project.


# BELOW IS THE NAME OF FILE, THAT WE WANT TO OGNORE I.E .ENV FILE, WHICH HOLDS ALL THE SENSITIVE STUFF


.env