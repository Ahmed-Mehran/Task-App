
####  CONFIGURING OUR POSTGRES SQL DATABASE SETTINGS


### IN THIS LECTURE WE WILL REPLACE OUR DATABASE FROM SQL LITE THAT WE WERE USING TO POSTGRESS SQL IN AWS

### FIRST OF ALL WE WILL INSTALL A PACKAGE I.E pip install psycopg2-binary, WHICH IS GOING TO ALLOW US TO UTILIZE POSTGRESS DB AND IMPLEMENT
### IT WITHIN OUR DJANGO APPLICATION

### THEN WE WE WILL GO IN THE SETTINGS.PY TO CONNECT TO THIS POSTGRESS SQL AND WRITE DOWN SOME LOGIC THERE





# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


## IF YOU CAN SEE BY DEFAULT WE ARE UTILIZING SQL LITE DB, WHICH IS PERFECT FOR SMALL DATA STORAGE, BUT IF YOU ARE MOVING TO A MORE PRODUCTION ENVIRONMENT, WE NEED TO CHOOSE
## A STRONGER DATABASE ENGINEE, SO POSTGRESS IS A GOOD OPTION, LIKE THE ABOVE DATABASE IS ADDED BY DEFAULT, WE WILL ADD THIS ONE. 

# DATABASES = {

#     'default': {   ## SETTING UP A DEFAULT NEW DATABASE


#         'ENGINE': 'django.db.backends.postgresql',  ## POSTGRESS ENGINEE

## BELOW FIELD WILL BE WILL BE DEFINED BELOW AFTER VID 120

#         'NAME': '',  ## SET THE DATABASE NAME

#         'USER': '',  ## THE USER OF THE DATABASE

#         'PASSWORD': '',  ## PASSWORD OF THE DB

#         'HOST': '',     ## HOST OF THE DB

###   TILL HERE

#         'PORT': '5432',  ## DEFAULT PORT VALUE
#     }
# }

### REMEMBER WHEN WE WILL SWITCH DATABASE FROM SQL LITE TO POSTGRESS SQL, ALL OUR OBJECTS IN THE SQL LITE DATABASE WILL BE SAVED, BUT WHEN YOU WILL START USING THIS
### YOU WONT BE ABLE TO ACCESS THOSE AND AS YOU SWITHCED DATABASES, YOU NOW HAVE TO CREATE NEW SUPER USER, NEW OBJECTS, BUT THE STATIC FILES AND ALL OTHER WILL REMAIN THE SAVED
### AND ALSO REMEBER YOU CAN USE ON DATABASE AT A TIME, I.E THERE CAN BE ONLY ONE DEFAULT DATABASE AT A TIME, YOU CAN SWITCH AND RETRIEVE ALL THE DATA BUT WHILE USING DATABASES
### THERE CAN BE ONLY DEFAULT DB

### NOW IN VID 120 WE WILL CREATE AN RDS INSTANCE WITH POSTGRESS SQL AND THEN DEFINE THE REMAINING FEILDS IN ABOVE SETTINGS.PY TO USE DEFAULT POSTGRESS DB




#######  VID 120

## CREATING AN RDS-RELATIONAL DATABASE INSTANCE WITH POSTGRESS SQL IN AWS

# DATABASES = {

#     'default': {   ## SETTING UP A DEFAULT NEW DATABASE


#         'ENGINE': 'django.db.backends.postgresql',  ## POSTGRESS ENGINEE

#         'NAME': 'demo_1a',  ##  NAME OF DATABASE THAT WE SET

#         'USER': 'mehran_db',  ## mehran_db is the Master name/user name of the Postgress db that we have created

#         'PASSWORD': 'Patanahi786',  ## PASSWORD OF THE DB under mehran_db

#         'HOST': 'database-1.c582waoo0cgd.us-east-2.rds.amazonaws.com',     ## SO AFTER CREATING THE RDS DATABASE WITH POSGRESS, YOU WILL SEE A END POINT ON CLICKING ON 
                                                                             ## THE DATABASE THAT YOU HAVE CREATED

#         'PORT': '5432',  ## while creating RDS instance in AWS, you will see in Additonal config, the Default DB port 5432
#     }
# }

## SEE AFTER CREATING A RDS DATABASE WITH POSGRESS, ABOVE ARE THE CHANGES THAT WE MADE IN THE SETTINGS.PY, WE GOT THE NAME, USER PASSWORD AND AFTER THE DATABASE WAS CREATED
## AND FUNCTIONAL WE GOT THE HOST ADDRESS AS WELL.
## THE NEXT THING WE WILL DO IS CONFIGURE THE SECURITY GROUPS IN AWS FOR OUR RDS TO ESSENTIALLY ALLOW YOUR DJANGO APPLICATION TO ACCESS THIS POSGRESS DATABASE THAT WE CREATED
## CLICK THE LINK UNDER VPC SECURITY GROUPS AND MAKE THE NECESSARY CHANGES, WE ARE GOING TO SET SOME INBOUND AND OUTBOUND RULES, WHICH I KNOW ABOUT, AS I HAD READ ABOUT THIS
## IN AWS CLOUD PRACTITIONER, WE WILL JUST SET SOME INBOUND RULES ON OUR RDS INSTANCE, ALLOWING ALL IPV4 AND IPV6 ADDRESS TO ACCESS OUR RDS DATABASE

## NOW OUR RDS DATABASE IS READY AND WE CAN REPLACE OUR SQL LITE DATABASE WITH THIS POSSGRESS DATABASE, JUST COMMENT OUR THE SQL LITE DATABASE SETTING IN THE SETTINGS.PY
## AS WE REMEMBER WE CAN ONLY USE 1 DB AT A TIME LIKE BELOW

# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }



DATABASES = {

    'default': {   


        'ENGINE': 'django.db.backends.postgresql',  

        'NAME': 'demo_1a',  

        'USER': 'mehran_db',  

        'PASSWORD': 'Patanahi786',  

        'HOST': 'database-1.c582waoo0cgd.us-east-2.rds.amazonaws.com',    

        'PORT': '5432', 
    }
}



## NOW IF WE RUN PYTHON MANAGE.PY RUNSERVER AND IF WE GET THIS 'You have 21 unapplied migration(s). Your project may not work properly until you apply the migrations for
## app(s): admin, auth, contenttypes, journal, sessions. Run 'python manage.py migrate' to apply them. THIS MEANS OUR NEW DATABASE HAS CONFIGURED SUCCESSFULLY
## WE WILL JUST MAKE THE NEW MIGRATIONS I.E python manage.py makemigrations and migrate commands as we know and now our new database in the backend is Possgress SQL


####  THATS IT FOR CONNECTING OUR DATABASE TO CLOUD AND ALSO WE USED S3 BUCKET FOR STORING FILES, THE MAIN VIDEO IN THIS FULL SECTION ARE  VID_120 I.E CREATING AN RDS INSTANCE
####  WITH POSGRESS AND ALSO VID 119. VID_116 IS ALSO IMPORTANT, WHICH IS ABOUT INTEGRATING S3 BUCKET WITH OUR APPLICATION

## NOW AFTER CONNECTING AND TESTING THE ABOVE POSSGRESS SQL FROM CLOUD, WE WILL CONNECT BACK THE SQL LITE DATABASE FOR NOW, NOW IF YOU WANT
## TO USE POSSGRESS DATABASE, JUST COMMENT OUT THE POSSGRESS DATABASE SETTING IN SETTINGS.PY AND ALSO REACTIVATE THE RDS INSTANCE ON AWS CLOUD



